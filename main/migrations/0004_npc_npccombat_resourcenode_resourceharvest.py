# Generated by Django 5.2.5 on 2025-08-16 16:14

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0003_flag_flagattack_flagupgrade'),
    ]

    operations = [
        migrations.CreateModel(
            name='NPC',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('npc_type', models.CharField(choices=[('bandit', 'Bandit'), ('thug', 'Street Thug'), ('enforcer', 'Rival Enforcer'), ('boss', 'Crime Boss'), ('cop', 'Corrupt Cop'), ('rival_soldier', 'Rival Soldier'), ('bouncer', 'Club Bouncer'), ('dealer', 'Drug Dealer'), ('hitman', 'Hitman'), ('informant', 'Informant')], max_length=20)),
                ('name', models.CharField(help_text='NPC display name', max_length=100)),
                ('lat', models.FloatField(help_text='NPC latitude')),
                ('lon', models.FloatField(help_text='NPC longitude')),
                ('level', models.IntegerField(default=1)),
                ('hp', models.IntegerField(default=100)),
                ('max_hp', models.IntegerField(default=100)),
                ('strength', models.IntegerField(default=10)),
                ('defense', models.IntegerField(default=10)),
                ('speed', models.IntegerField(default=10)),
                ('aggression', models.FloatField(default=0.5, help_text='How likely to attack players (0-1)')),
                ('wander_radius', models.IntegerField(default=50, help_text='Meters NPC can move from spawn')),
                ('respawn_time', models.IntegerField(default=1800, help_text='Seconds to respawn after death')),
                ('base_experience_reward', models.IntegerField(default=25)),
                ('base_gold_reward', models.IntegerField(default=100)),
                ('base_reputation_reward', models.IntegerField(default=5)),
                ('is_alive', models.BooleanField(default=True)),
                ('last_death', models.DateTimeField(blank=True, null=True)),
                ('current_target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='targeted_by_npcs', to='main.player')),
            ],
            options={
                'unique_together': {('lat', 'lon')},
            },
        ),
        migrations.CreateModel(
            name='NPCCombat',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('initiated', 'Combat Initiated'), ('in_progress', 'In Progress'), ('player_won', 'Player Victory'), ('npc_won', 'NPC Victory'), ('fled', 'Player Fled')], default='initiated', max_length=20)),
                ('player_damage_dealt', models.IntegerField(default=0)),
                ('npc_damage_dealt', models.IntegerField(default=0)),
                ('experience_gained', models.IntegerField(default=0)),
                ('gold_gained', models.IntegerField(default=0)),
                ('reputation_gained', models.IntegerField(default=0)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('npc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='combat_encounters', to='main.npc')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='npc_combats', to='main.player')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResourceNode',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resource_type', models.CharField(choices=[('tree', 'Tree'), ('iron_mine', 'Iron Mine'), ('gold_mine', 'Gold Mine'), ('stone_quarry', 'Stone Quarry'), ('herb_patch', 'Herb Patch'), ('ruins', 'Ancient Ruins'), ('cave', 'Cave'), ('well', 'Water Well')], max_length=20)),
                ('lat', models.FloatField(help_text='Resource latitude')),
                ('lon', models.FloatField(help_text='Resource longitude')),
                ('hp', models.IntegerField(default=100, help_text='Resource hit points')),
                ('max_hp', models.IntegerField(default=100, help_text='Maximum hit points')),
                ('level', models.IntegerField(default=1, help_text='Resource level (1-5)')),
                ('last_harvested', models.DateTimeField(blank=True, null=True)),
                ('harvest_count', models.IntegerField(default=0, help_text='Times harvested')),
                ('respawn_time', models.IntegerField(default=3600, help_text='Seconds to respawn')),
                ('base_experience', models.IntegerField(default=10)),
                ('base_gold_reward', models.IntegerField(default=50)),
                ('base_resource_amount', models.IntegerField(default=5)),
                ('is_depleted', models.BooleanField(default=False)),
                ('created_by_system', models.BooleanField(default=True)),
            ],
            options={
                'unique_together': {('lat', 'lon')},
            },
        ),
        migrations.CreateModel(
            name='ResourceHarvest',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('in_progress', 'Harvesting'), ('completed', 'Completed'), ('interrupted', 'Interrupted'), ('failed', 'Failed')], default='in_progress', max_length=20)),
                ('experience_gained', models.IntegerField(default=0)),
                ('gold_gained', models.IntegerField(default=0)),
                ('resources_gained', models.IntegerField(default=0)),
                ('resource_type', models.CharField(blank=True, max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.IntegerField(default=30, help_text='Time to complete harvest')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resource_harvests', to='main.player')),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='harvests', to='main.resourcenode')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
