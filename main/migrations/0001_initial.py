# Generated by Django 5.2.5 on 2025-08-17 15:29

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ItemTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(max_length=500)),
                ('item_type', models.CharField(choices=[('weapon', 'Weapon'), ('armor', 'Armor'), ('consumable', 'Consumable'), ('material', 'Material'), ('quest', 'Quest Item'), ('misc', 'Miscellaneous')], max_length=20)),
                ('rarity', models.CharField(choices=[('common', 'Common'), ('uncommon', 'Uncommon'), ('rare', 'Rare'), ('epic', 'Epic'), ('legendary', 'Legendary')], default='common', max_length=20)),
                ('strength_bonus', models.IntegerField(default=0)),
                ('defense_bonus', models.IntegerField(default=0)),
                ('vitality_bonus', models.IntegerField(default=0)),
                ('agility_bonus', models.IntegerField(default=0)),
                ('intelligence_bonus', models.IntegerField(default=0)),
                ('damage', models.IntegerField(default=0)),
                ('base_value', models.IntegerField(default=1, help_text='Base gold value')),
                ('level_required', models.IntegerField(default=1)),
                ('max_stack_size', models.IntegerField(default=1)),
            ],
            options={
                'db_table': 'rpg_item_templates',
            },
        ),
        migrations.CreateModel(
            name='MonsterTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(max_length=300)),
                ('level', models.IntegerField(default=1)),
                ('base_hp', models.IntegerField(default=50)),
                ('strength', models.IntegerField(default=10)),
                ('defense', models.IntegerField(default=8)),
                ('agility', models.IntegerField(default=8)),
                ('base_experience', models.IntegerField(default=25)),
                ('base_gold', models.IntegerField(default=10)),
                ('is_aggressive', models.BooleanField(default=True)),
                ('respawn_time_minutes', models.IntegerField(default=30)),
            ],
            options={
                'db_table': 'rpg_monster_templates',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('lat_min', models.FloatField()),
                ('lat_max', models.FloatField()),
                ('lon_min', models.FloatField()),
                ('lon_max', models.FloatField()),
                ('monster_level_min', models.IntegerField(default=1)),
                ('monster_level_max', models.IntegerField(default=10)),
                ('spawn_rate', models.FloatField(default=1.0, help_text='Spawn rate multiplier')),
                ('pvp_enabled', models.BooleanField(default=True)),
                ('is_safe_zone', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'rpg_regions',
            },
        ),
        migrations.CreateModel(
            name='Character',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('lat', models.FloatField(help_text='Current latitude')),
                ('lon', models.FloatField(help_text='Current longitude')),
                ('level', models.IntegerField(default=1)),
                ('experience', models.BigIntegerField(default=0)),
                ('strength', models.IntegerField(default=10, help_text='Physical power, affects damage')),
                ('defense', models.IntegerField(default=10, help_text='Physical defense, reduces damage')),
                ('vitality', models.IntegerField(default=10, help_text='Health and stamina')),
                ('agility', models.IntegerField(default=10, help_text='Speed and dodge chance')),
                ('intelligence', models.IntegerField(default=10, help_text='Magic power and mana')),
                ('max_hp', models.IntegerField(default=100)),
                ('current_hp', models.IntegerField(default=100)),
                ('max_mana', models.IntegerField(default=50)),
                ('current_mana', models.IntegerField(default=50)),
                ('max_stamina', models.IntegerField(default=100)),
                ('current_stamina', models.IntegerField(default=100)),
                ('gold', models.BigIntegerField(default=1000, help_text='Primary currency')),
                ('is_online', models.BooleanField(default=False)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('in_combat', models.BooleanField(default=False)),
                ('pvp_enabled', models.BooleanField(default=True, help_text='Can be attacked by other players')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='character', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'rpg_characters',
            },
        ),
        migrations.CreateModel(
            name='GameEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event_type', models.CharField(choices=[('combat', 'Combat Event'), ('trade', 'Trade Event'), ('level_up', 'Level Up'), ('item_found', 'Item Found'), ('player_nearby', 'Player Nearby')], max_length=20)),
                ('title', models.CharField(max_length=100)),
                ('message', models.TextField(max_length=300)),
                ('data', models.JSONField(default=dict)),
                ('is_read', models.BooleanField(default=False)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='main.character')),
            ],
            options={
                'db_table': 'rpg_events',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Monster',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lat', models.FloatField()),
                ('lon', models.FloatField()),
                ('current_hp', models.IntegerField()),
                ('max_hp', models.IntegerField()),
                ('is_alive', models.BooleanField(default=True)),
                ('last_death', models.DateTimeField(blank=True, null=True)),
                ('respawn_at', models.DateTimeField(blank=True, null=True)),
                ('in_combat', models.BooleanField(default=False)),
                ('current_target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.character')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.monstertemplate')),
            ],
            options={
                'db_table': 'rpg_monsters',
            },
        ),
        migrations.CreateModel(
            name='PvECombat',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('victory', 'Player Victory'), ('defeat', 'Player Defeat'), ('fled', 'Player Fled')], default='active', max_length=20)),
                ('character_hp', models.IntegerField()),
                ('monster_hp', models.IntegerField()),
                ('experience_gained', models.IntegerField(default=0)),
                ('gold_gained', models.IntegerField(default=0)),
                ('items_dropped', models.JSONField(default=list)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pve_combats', to='main.character')),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='combats', to='main.monster')),
            ],
            options={
                'db_table': 'rpg_pve_combat',
            },
        ),
        migrations.CreateModel(
            name='PvPCombat',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('challenge', 'Challenge Sent'), ('accepted', 'Challenge Accepted'), ('active', 'Combat Active'), ('victory', 'Combat Ended - Victory'), ('declined', 'Challenge Declined'), ('expired', 'Challenge Expired')], default='challenge', max_length=20)),
                ('challenger_hp', models.IntegerField(default=0)),
                ('defender_hp', models.IntegerField(default=0)),
                ('lat', models.FloatField()),
                ('lon', models.FloatField()),
                ('gold_wagered', models.IntegerField(default=0)),
                ('winner_takes_gold', models.IntegerField(default=0)),
                ('challenge_expires_at', models.DateTimeField()),
                ('ended_at', models.DateTimeField(blank=True, null=True)),
                ('challenger', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pvp_challenges_sent', to='main.character')),
                ('defender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pvp_challenges_received', to='main.character')),
                ('winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pvp_wins', to='main.character')),
            ],
            options={
                'db_table': 'rpg_pvp_combat',
            },
        ),
        migrations.CreateModel(
            name='Trade',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('initiator_gold', models.IntegerField(default=0)),
                ('recipient_gold', models.IntegerField(default=0)),
                ('expires_at', models.DateTimeField()),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('initiator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trades_initiated', to='main.character')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trades_received', to='main.character')),
            ],
            options={
                'db_table': 'rpg_trades',
            },
        ),
        migrations.CreateModel(
            name='TradeItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quantity', models.IntegerField(default=1)),
                ('from_character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.character')),
                ('item_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.itemtemplate')),
                ('trade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='main.trade')),
            ],
            options={
                'db_table': 'rpg_trade_items',
            },
        ),
        migrations.CreateModel(
            name='InventoryItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quantity', models.IntegerField(default=1)),
                ('is_equipped', models.BooleanField(default=False)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='main.character')),
                ('item_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.itemtemplate')),
            ],
            options={
                'db_table': 'rpg_inventory',
                'unique_together': {('character', 'item_template')},
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('skill_type', models.CharField(choices=[('combat', 'Combat'), ('magic', 'Magic'), ('crafting', 'Crafting'), ('gathering', 'Gathering'), ('social', 'Social')], max_length=20)),
                ('name', models.CharField(max_length=50)),
                ('level', models.IntegerField(default=1)),
                ('experience', models.IntegerField(default=0)),
                ('character', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skills', to='main.character')),
            ],
            options={
                'db_table': 'rpg_skills',
                'unique_together': {('character', 'name')},
            },
        ),
    ]
