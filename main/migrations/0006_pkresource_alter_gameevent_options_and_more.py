# Generated by Django 5.2.5 on 2025-08-16 18:57

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0005_add_npc_flag_relationship'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='PKResource',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resource_type', models.CharField(choices=[('tree', 'Tree'), ('rock', 'Rock'), ('mine', 'Mine'), ('ruins', 'Ancient Ruins'), ('chest', 'Treasure Chest')], max_length=10)),
                ('lat', models.FloatField()),
                ('lon', models.FloatField()),
                ('level', models.IntegerField(default=1, help_text='Resource difficulty/quality')),
                ('health', models.IntegerField(default=100)),
                ('max_health', models.IntegerField(default=100)),
                ('lumber_yield', models.IntegerField(default=0)),
                ('stone_yield', models.IntegerField(default=0)),
                ('ore_yield', models.IntegerField(default=0)),
                ('gold_yield', models.IntegerField(default=0)),
                ('food_yield', models.IntegerField(default=0)),
                ('is_depleted', models.BooleanField(default=False)),
                ('respawn_time', models.DateTimeField(blank=True, null=True)),
                ('last_harvested', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'pk_resources',
            },
        ),
        migrations.AlterModelOptions(
            name='gameevent',
            options={},
        ),
        migrations.RemoveField(
            model_name='gameevent',
            name='data',
        ),
        migrations.RemoveField(
            model_name='gameevent',
            name='event_type',
        ),
        migrations.RemoveField(
            model_name='gameevent',
            name='player',
        ),
        migrations.RemoveField(
            model_name='gameevent',
            name='processed',
        ),
        migrations.CreateModel(
            name='CombatSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('active', 'Combat Active'), ('player_turn', 'Player Turn'), ('npc_turn', 'NPC Turn'), ('player_victory', 'Player Victory'), ('npc_victory', 'NPC Victory'), ('player_fled', 'Player Fled'), ('expired', 'Session Expired')], default='player_turn', max_length=20)),
                ('turn_number', models.IntegerField(default=1)),
                ('player_hp', models.IntegerField(help_text='Player HP at start of combat')),
                ('npc_hp', models.IntegerField(help_text='NPC HP at start of combat')),
                ('player_current_hp', models.IntegerField(help_text="Player's current HP")),
                ('npc_current_hp', models.IntegerField(help_text="NPC's current HP")),
                ('player_attack_bonus', models.IntegerField(default=0)),
                ('player_defense_bonus', models.IntegerField(default=0)),
                ('npc_attack_bonus', models.IntegerField(default=0)),
                ('npc_defense_bonus', models.IntegerField(default=0)),
                ('player_effects', models.JSONField(default=dict, help_text='Active status effects on player')),
                ('npc_effects', models.JSONField(default=dict, help_text='Active status effects on NPC')),
                ('expires_at', models.DateTimeField(help_text='When session expires if inactive')),
                ('last_action', models.DateTimeField(auto_now=True)),
                ('total_damage_to_npc', models.IntegerField(default=0)),
                ('total_damage_to_player', models.IntegerField(default=0)),
                ('experience_gained', models.IntegerField(default=0)),
                ('gold_gained', models.IntegerField(default=0)),
                ('reputation_gained', models.IntegerField(default=0)),
                ('npc', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='combat_sessions', to='main.npc')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='combat_sessions', to='main.player')),
            ],
            options={
                'unique_together': {('player', 'npc')},
            },
        ),
        migrations.CreateModel(
            name='CombatAction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('actor', models.CharField(choices=[('player', 'Player'), ('npc', 'NPC')], max_length=10)),
                ('action_type', models.CharField(choices=[('attack', 'Basic Attack'), ('heavy_attack', 'Heavy Attack'), ('quick_attack', 'Quick Attack'), ('defend', 'Defend'), ('special_ability', 'Special Ability'), ('use_item', 'Use Item'), ('flee', 'Attempt to Flee')], max_length=20)),
                ('turn_number', models.IntegerField()),
                ('target', models.CharField(choices=[('player', 'Player'), ('npc', 'NPC')], max_length=10)),
                ('damage_dealt', models.IntegerField(default=0)),
                ('healing_done', models.IntegerField(default=0)),
                ('was_critical', models.BooleanField(default=False)),
                ('was_miss', models.BooleanField(default=False)),
                ('effects_applied', models.JSONField(blank=True, default=dict)),
                ('description', models.TextField(blank=True, max_length=500)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='main.combatsession')),
            ],
            options={
                'ordering': ['turn_number', 'created_at'],
            },
        ),
        migrations.AddField(
            model_name='npccombat',
            name='combat_session',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='legacy_combat', to='main.combatsession'),
        ),
        migrations.CreateModel(
            name='PKPlayer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('level', models.IntegerField(default=1)),
                ('food', models.IntegerField(default=100, help_text='Food for actions')),
                ('energy', models.IntegerField(default=100, help_text='Energy for movement/combat')),
                ('gold', models.BigIntegerField(default=100, help_text='Primary currency')),
                ('lumber', models.IntegerField(default=0)),
                ('stone', models.IntegerField(default=0)),
                ('ore', models.IntegerField(default=0)),
                ('might', models.IntegerField(default=10, help_text='Combat power')),
                ('defense', models.IntegerField(default=10)),
                ('health', models.IntegerField(default=100)),
                ('max_health', models.IntegerField(default=100)),
                ('lat', models.FloatField(help_text='Current latitude')),
                ('lon', models.FloatField(help_text='Current longitude')),
                ('is_online', models.BooleanField(default=False)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('last_energy_regen', models.DateTimeField(auto_now_add=True)),
                ('last_food_consumption', models.DateTimeField(auto_now_add=True)),
                ('avatar', models.IntegerField(default=0)),
                ('status_message', models.CharField(blank=True, max_length=100)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pk_player', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'pk_players',
            },
        ),
        migrations.CreateModel(
            name='PKMessage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('message_type', models.CharField(choices=[('private', 'Private Message'), ('alliance', 'Alliance Message'), ('global', 'Global Chat'), ('system', 'System Message')], max_length=10)),
                ('subject', models.CharField(blank=True, max_length=100)),
                ('content', models.TextField(max_length=1000)),
                ('is_read', models.BooleanField(default=False)),
                ('is_deleted_by_sender', models.BooleanField(default=False)),
                ('is_deleted_by_recipient', models.BooleanField(default=False)),
                ('lat', models.FloatField(blank=True, null=True)),
                ('lon', models.FloatField(blank=True, null=True)),
                ('recipient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages_received', to='main.pkplayer')),
                ('sender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages_sent', to='main.pkplayer')),
            ],
            options={
                'db_table': 'pk_messages',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PKGameEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event_type', models.CharField(choices=[('combat', 'Combat Event'), ('trade', 'Trade Event'), ('resource', 'Resource Event'), ('territory', 'Territory Event'), ('player', 'Player Event'), ('alliance', 'Alliance Event')], max_length=10)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField(max_length=500)),
                ('event_data', models.JSONField(default=dict)),
                ('lat', models.FloatField(blank=True, null=True)),
                ('lon', models.FloatField(blank=True, null=True)),
                ('is_processed', models.BooleanField(default=False)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='main.pkplayer')),
            ],
            options={
                'db_table': 'pk_events',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PKAlliance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True, max_length=500)),
                ('total_might', models.IntegerField(default=0)),
                ('member_count', models.IntegerField(default=1)),
                ('territory_count', models.IntegerField(default=0)),
                ('is_recruiting', models.BooleanField(default=True)),
                ('min_level', models.IntegerField(default=1)),
                ('leader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='led_alliances', to='main.pkplayer')),
            ],
            options={
                'db_table': 'pk_alliances',
            },
        ),
        migrations.CreateModel(
            name='PKTerritory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('territory_type', models.CharField(choices=[('flag', 'Flag'), ('outpost', 'Outpost'), ('city', 'City'), ('castle', 'Castle')], default='flag', max_length=10)),
                ('name', models.CharField(max_length=50)),
                ('lat', models.FloatField()),
                ('lon', models.FloatField()),
                ('level', models.IntegerField(default=1)),
                ('health', models.IntegerField(default=100)),
                ('max_health', models.IntegerField(default=100)),
                ('defense_bonus', models.IntegerField(default=0)),
                ('lumber_generation', models.IntegerField(default=1, help_text='Lumber per hour')),
                ('stone_generation', models.IntegerField(default=1, help_text='Stone per hour')),
                ('ore_generation', models.IntegerField(default=0, help_text='Ore per hour')),
                ('gold_generation', models.IntegerField(default=1, help_text='Gold per hour')),
                ('is_active', models.BooleanField(default=True)),
                ('last_resource_collection', models.DateTimeField(auto_now_add=True)),
                ('placed_at', models.DateTimeField(auto_now_add=True)),
                ('protection_expires', models.DateTimeField(blank=True, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='territories', to='main.pkplayer')),
            ],
            options={
                'verbose_name_plural': 'territories',
                'db_table': 'pk_territories',
            },
        ),
        migrations.CreateModel(
            name='PKCombat',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('combat_type', models.CharField(choices=[('pve', 'Player vs Environment'), ('pvp', 'Player vs Player'), ('siege', 'Territory Siege')], max_length=10)),
                ('attacker_might', models.IntegerField()),
                ('defender_might', models.IntegerField()),
                ('winner', models.CharField(choices=[('attacker', 'Attacker'), ('defender', 'Defender')], max_length=10)),
                ('gold_transferred', models.IntegerField(default=0)),
                ('lumber_transferred', models.IntegerField(default=0)),
                ('stone_transferred', models.IntegerField(default=0)),
                ('ore_transferred', models.IntegerField(default=0)),
                ('lat', models.FloatField()),
                ('lon', models.FloatField()),
                ('attacker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attacks_made', to='main.pkplayer')),
                ('defender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='attacks_received', to='main.pkplayer')),
                ('target_territory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.pkterritory')),
            ],
            options={
                'db_table': 'pk_combat',
            },
        ),
        migrations.CreateModel(
            name='PKTrade',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('trade_type', models.CharField(choices=[('player', 'Player to Player'), ('market', 'Market Trade'), ('caravan', 'Caravan Trade')], max_length=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='pending', max_length=10)),
                ('offer_gold', models.IntegerField(default=0)),
                ('offer_lumber', models.IntegerField(default=0)),
                ('offer_stone', models.IntegerField(default=0)),
                ('offer_ore', models.IntegerField(default=0)),
                ('offer_food', models.IntegerField(default=0)),
                ('request_gold', models.IntegerField(default=0)),
                ('request_lumber', models.IntegerField(default=0)),
                ('request_stone', models.IntegerField(default=0)),
                ('request_ore', models.IntegerField(default=0)),
                ('request_food', models.IntegerField(default=0)),
                ('expires_at', models.DateTimeField()),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('initiator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trades_initiated', to='main.pkplayer')),
                ('recipient', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='trades_received', to='main.pkplayer')),
            ],
            options={
                'db_table': 'pk_trades',
            },
        ),
        migrations.CreateModel(
            name='PKAllianceMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rank', models.CharField(choices=[('member', 'Member'), ('officer', 'Officer'), ('leader', 'Leader')], default='member', max_length=10)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('contribution_points', models.IntegerField(default=0)),
                ('alliance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='members', to='main.pkalliance')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alliance_memberships', to='main.pkplayer')),
            ],
            options={
                'db_table': 'pk_alliance_members',
                'unique_together': {('alliance', 'player')},
            },
        ),
    ]
