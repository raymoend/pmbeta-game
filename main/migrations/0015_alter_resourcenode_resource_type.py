# Generated by Django 5.2.5 on 2025-08-24 04:19

from django.db import migrations, models


def safe_cleanup_legacy_tables(apps, schema_editor):
    """Safely remove orphaned rows from legacy PK tables if they exist.
    This guards against missing tables on fresh databases (e.g., Railway Postgres)
    where the legacy PK tables were never created.
    """
    conn = schema_editor.connection
    existing = set(conn.introspection.table_names())

    # Helper to execute SQL safely
    def exec_sql(sql: str):
        with conn.cursor() as cursor:
            cursor.execute(sql)

    # 1) Remove orphaned zones that point to non-existent flags
    if 'pk_territory_zones' in existing and 'pk_territory_flags' in existing:
        try:
            exec_sql(
                "DELETE FROM pk_territory_zones "
                "WHERE flag_id NOT IN (SELECT id FROM pk_territory_flags)"
            )
        except Exception:
            # Ignore cleanup failures; they are non-critical
            pass

    # 2) Remove flags that point to non-existent characters (legacy schema)
    if 'pk_territory_flags' in existing and 'rpg_characters' in existing:
        try:
            exec_sql(
                "DELETE FROM pk_territory_flags "
                "WHERE owner_id NOT IN (SELECT id FROM rpg_characters)"
            )
        except Exception:
            pass

    # 3) Remove any zones that now became orphaned after deleting invalid flags
    if 'pk_territory_zones' in existing and 'pk_territory_flags' in existing:
        try:
            exec_sql(
                "DELETE FROM pk_territory_zones "
                "WHERE flag_id NOT IN (SELECT id FROM pk_territory_flags)"
            )
        except Exception:
            pass


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0014_character_unspent_stat_points'),
    ]

    operations = [
        # Cleanup legacy PK table rows with broken FKs, but only if tables exist
        migrations.RunPython(safe_cleanup_legacy_tables, migrations.RunPython.noop),
        migrations.AlterField(
            model_name='resourcenode',
            name='resource_type',
            field=models.CharField(choices=[('tree', 'Neon Tree'), ('iron_mine', 'Plasma Mine'), ('gold_mine', 'Stellar Crystal Vein'), ('stone_quarry', 'Alloy Quarry'), ('herb_patch', 'Mutant Herb Cluster'), ('ruins', 'Ancient Alien Ruins'), ('cave', 'Void-Touched Cave'), ('well', 'Hydration Nexus'), ('farm', 'Biofarm'), ('berry_bush', 'Energy Berry Bush')], max_length=20),
        ),
    ]
